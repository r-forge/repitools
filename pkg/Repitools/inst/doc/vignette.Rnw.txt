\documentclass[a4paper, 12pt]{article}
\author{\href{mailto:m.robinson@garvan.org.au}{Mark Robinson}  \href{mailto:a.statham@garvan.org.au}{Aaron Statham}  \href{mailto:d.strbenac@garvan.org.au}{Dario Strbenac}}
\usepackage{amsmath}
\usepackage{amssymb}
\usepackage{amscd}
\usepackage{graphicx}
\usepackage[tableposition=top]{caption}
\usepackage{ifthen}
\usepackage[utf8]{inputenc}
\topmargin -.5in
\headheight 0in
\headsep 0in
\oddsidemargin -.5in
\evensidemargin -.5in
\textwidth 176mm
\textheight 245mm

\usepackage{color}
\usepackage{Sweave}
\usepackage[pdftex]{hyperref}

\begin{document}
\SweaveOpts{engine=R}
%\VignetteIndexEntry{Examples of Common Tasks With Sequencing Data}

\title{Performing Some Basic Quality Checking and Analysis on Sequencing Data with \texttt{Repitools}}
\maketitle
\date

\section{Introduction}
\texttt{Repitools} is a package that allows statistics of differential epigenetic marking to be calculated, as well as summaries of genome - wide trends to be visualised in a variety of formats. Some basic quality checking utilities are also available for sequencing data. The utility of \texttt{Repitools} comes from that most of the functionality available is implemented for both microarrays and next generation sequencing, with very similar function calls for both types of data.
\\ \\
In this vignette, quality checking of the sequencing data, followed by analysis and visualisation will be demonstrated. A more detailed description of the package can be found in the associated Bioinformatics Applications Note \footnote{\href{http://bioinformatics.oxfordjournals.org/content/26/13/1662.abstract}{Repitools: an R package for the analysis of enrichment-based epigenomic data}}
\\ \\
To start with, load the \texttt{Repitools} package.

<<label=loadPkg>>=
library(Repitools)
@

\section{Data}
A \texttt{GRangesList} of mapped short reads from an Illumina Genome Analyser of four samples is included with the package. \texttt{GRanges} objects of mapped files from many popular aligners can be created by first reading them into \textbf{R} with the \texttt{readAligned} function in the \texttt{ShortRead} package, then coerced with \texttt{as(alnRdObj, "GRanges")}. Only reads on chromosome 21 were kept, to have fast - running examples. The details of the samples are :

<<label=loadAndShow>>=
dataPath <- system.file("data", package = "Repitools")
load(paste(dataPath, "samplesList.Rdata", sep = .Platform$file.sep))
names(samplesList)
@

Also, an annotation of genes located on chromosome 21 is included. The annotation is based on one provided from Affymetrix with their expression arrays \footnote{\href{http://www.affymetrix.com/Auth/analysis/downloads/na27/wtgene/HuGene-1\_0-st-v1.na27.hg18.transcript.csv.zip}{http://www.affymetrix.com/Auth/analysis/downloads/na27/wtgene/HuGene-1\_0-st-v1.na27.hg18.transcript.csv.zip}}.
 
<<label=readAnno>>=
geneAnno <- read.csv(paste(dataPath, "chr21genes.csv", sep = .Platform$file.sep), stringsAsFactors = FALSE)
head(geneAnno)
@

\noindent Lastly, there is matrix of gene expression difference data, with each element related to the corresponding row in the gene annotation table. These values are the t-statistics of background corrected and RMA normalised Affymetrix expression array experiments. The expression differences matrix will be used when illustrating some of the visualisation functionality later in the vignette.

<<label=loadExpr>>=
load(paste(dataPath, "expr.Rdata", sep = .Platform$file.sep))
head(expr)
@

\section{Quality Checking}
Notice that two of the samples are MBD2 IPs, and two are inputs. Therefore, the IP samples should differ to the inputs in two ways. Firstly, they should be more CpG rich, since DNA methylation rarely ever occurs outside of this sequence context. Also, since DNA methylation tends to occur in peaks, rather than spread out regions, a higher frequency of bases should have high coverage of reads in the IP samples than in input samples. The \texttt{enrichmentPlot} and \texttt{cpgDensityPlot} functions allow examination of this.

<<label=enrPlot, fig=TRUE>>=
library(BSgenome.Hsapiens.UCSC.hg18)
enrichmentPlot(samplesList, Hsapiens, 300, cols = c("blue", "red", "blue", "red"), xlim = c(0, 100), lwd = 2)
@

\noindent The above code uses the \texttt{Hsapiens} object to get the maximum base of chromosomes. The normalisation of the coverage used is to scale every coverage value by $ 10 \ million / number\_of\_reads\_in\_sample $. 300 is passed in as the \texttt{seqLen} parameter, because that is approximately the real length of the fragments sequenced. As expected, many more bases in the IP samples have high read coverages.
\\ \\
Next, the CpG density of reads is examined.

<<label=cpgPlot, fig=TRUE>>=
cpgDensityPlot(samplesList, cols = c("blue", "red", "blue", "red"), xlim = c(0, 30), wFunction = "none", organism = Hsapiens, seqLen = 300, lwd = 2)
@

\noindent This time the \texttt{Hsapiens} annotation is required so that the 300 base DNA sequence (tags are only 36 bp long) may be fetched. The \texttt{wFunction} parameter allows the count of CpGs to be weighted. In this example, raw counts are used.
\\ \\
Notice that at lower CpG densities, the two input samples have a higher frequency of reads than the two IP samples. At higher CpG densities, this trend is reversed. This suggests that the DNA methylation IP has worked.
\\ \\
\noindent For more general sequencing quality checking, the FastQC \footnote{\href{http://www.bioinformatics.bbsrc.ac.uk/projects/fastqc/}{http://www.bioinformatics.bbsrc.ac.uk/projects/fastqc/}} Java application has been gaining in popularity due to its speed and variety of results. A container class, \texttt{FastQC}, accessors, and the method \texttt{readFastQC} for reading in the raw Java program text file output and creating a FastQC \textbf{R} object, have been made to provide a framework for the fast development of quality control report generating pipelines. Higher level container classes with accessor methods are \texttt{SequenceQC}, which groups \texttt{FastQC} objects for the aligned and unaligned reads of a single sample together, and \texttt{SequenceQCSet} which is a collection of \texttt{SequenceQC} objects, perhaps of multiple sequencing samples within the same experimental run.

\section{Analyses and Visualisations}

The \texttt{blocksStats} function is a convenient way to do a statistical test of differential enrichment between two groups or treatments, for counts in windows surrounding some genomic landmarks, like TSSs. The function leverages the package \texttt{edgeR}'s modelling of counts as negative binomial distributed and its adaptation of Fisher's exact test to overdispersed data.

<<label = doStats>>=
designMatrix <- matrix(c(0, 1, 0, -1), dimnames = list(names(samplesList), "Cancer - Normal Methylation"))
designMatrix
stats <- blocksStats(samplesList, coordinatesTable = geneAnno, design = designMatrix, upStream = 2000, downStream = 0, seqLen = 300)
stats <- stats[order(stats$`FDR_Cancer - Normal Methylation`), ]
head(stats)
@

\noindent The example calculates statistics on TSS regions which start 2000 bases upstream of the TSS and finish at the TSS, after the reads have been extended to being 300 bases long. A coverage plot is shown to illustrate the best found region.

<<label = covPlot, fig = TRUE>>=
cvgs <- lapply(samplesList[c(2,4)], function(sampleRanges) 
               coverage(sampleRanges)[[1]]
               [stats$end[1] : (stats$end[1] + 2000), drop = TRUE])
plot(cvgs[[1]], type = 'l', ylim = c(-10, 10),
     main = "Coverage Plot for Best TSS Region (LOC284837)",
     xlab = "Distance From TSS", ylab = "Coverage", col = "red", lwd = 2)
lines(-cvgs[[2]], col = "blue", lwd = 2)
legend("topright", names(samplesList)[c(2, 4)], fill = c("red", "blue"))
@

\noindent Epigenomic data is often gathered with other data, such as gene expression. It may be of interest to see the profile of epigenetic mark enrichment at a variety of distances from TSSs, and stratify this into groups by the expression of genes. The \texttt{binPlots} function is a convenient way to look at these interactions.

<<label = binPlotsHeatmap, fig = TRUE>>=
binPlots(samplesList, geneAnno, design = designMatrix, by = 500, bw = 500, seqLen = 300, ordering = expr, ordLabel = "Expression t-stat", plotType = "heatmap", nbins = 10)
@

\noindent This example made counts in 500 base non - overlapping windows between -7500 bases upstream and 2500 bases downstream (the default range) for each gene, then split them into categories based on the expression difference value, and averaged over all counts for each particular window and expression category. It is encouraging to see that the lowest level of expression has a rather fine enrichment of DNA methylation about 2000 bases either side of the TSS. Apart from the heatmap visualisation, there are a number of other styles. Details can be found in the documentation of the function. More bins can be used for a nicer-looking heatmap when the full set of genes (genome-wide) is used.
\\ \\
\noindent To demonstrate how similar it is to generate another style of binned plot, the next example shows the same data as a line-plot. Note that the function call is the same, apart from the \texttt{plotType} parameter. Notice the spike in DNA methylation for the set of lowest expressed genes, which form the blue line.

<<label = binPlotsLine, fig = TRUE>>=
binPlots(samplesList, geneAnno, design = designMatrix, by = 500, bw = 500, seqLen = 300, ordering = expr, ordLabel = "Expression t-stat", plotType = "line", nbins = 10)
@

Some genes may be of interest to the researcher for some reason. This subset of genes may be known to be strongly marked with another epigenetic mark, or change in expression in the same direction strongly, or many other reasons. No matter what the reason for selecting the subset is, the profile of intensities or counts can be plotted versus the profile of randomly selected gene lists and compared with the \texttt{significancePlots} function. In the following example, it will be checked whether the DNA methylation profile of keratin-associated protein coding genes is any different to that of the other genes.

<<label = signifPlots, fig = TRUE>>=
whichKRTAP <- grep("KRTAP", geneAnno$symbol)
significancePlots(samplesList, geneAnno, geneList = list(`KRTAP Genes` = whichKRTAP), design = designMatrix, by = 500, bw = 500, seqLen = 300)
@

\noindent The blue region forms the null distribution that was created by sampling random gene lists of the same size as the user - specified gene list a number of times, as set by the \texttt{nSamples} parameter. By default, the null region is a between the 0.025 and 0.975 quantiles of the null distribution. In this example, it appears that the KRTAP gene set has a significant loss of methylation around from the gene TSS to around 2000 bases upstream, in comparison to random sets of other genes.
\\ \\
\noindent Another analysis of interest for the epigenomics research community is to find regions of the genome where epigenetics marks or changes in such marks occur in consecutive genes on a particular chromosome. The function \texttt{findClusters} addresses this need. The method of determining clusters is to look through the column of statistics for a set of consecutive scores in the same direction. Which potential clusters are significant is determined by randomising the ordering of the statistics column a number of times, and counting the number of clusters found in the real statistics column and the randomised statistics columns, from a loose cutoff to a tight cutoff, and choosing the cutoff to be the first cutoff that meets or is below the user - specified FDR. It will not be demonstrated, as this randomisation procedure is time consuming.

\section{Utility Functions}
These functions perform some task that is commonly made with the data, but is not a formal analysis. Often, it is required to create a set of windows covering the entire genome, for some analysis. The function \texttt{genomeBlocks} dies this.

<<label = genomeBlocks>>=
genomeBlocks(Hsapiens, "chr21", 5000)
@

\noindent This example makes a \texttt{GRanges} object of 5 kb windows along chromosome 21.
\\ \\
The researcher might have a set of locations that they want to know the CpG density of.

<<label = cpgDensCalc>>=
cpgDensityCalc(head(geneAnno), window = 100, organism = Hsapiens)
@

\noindent This example calculates the CpG density of a window 100 bases either side of the TSS for the first six genes on chromosome 21. By default, the CpG density is a linearly weighted count, such that a CpG at the TSS counts as one, and progressively less, towards zero, as the CpGs occur toward the edges of the region.
\\ \\
\noindent \texttt{annotationCounts} is useful to understand the counts of reads surrounding some landmarks, like TSSs. \texttt{annotationBlocksCounts} is the analogous function for counting in user-specified regions of the genome.

<<label = annoCounts>>=
annotationCounts(samplesList, head(geneAnno), 2000, 500, 300)
@

\noindent This example counts reads that fall within 2000 bases upstream and 500 bases downstream of the first six genes on chromosome 21.
\\ \\
\noindent It would be good to know when seeing a lack of reads in some windows, if the mappability of the window is the cause. Some regions of the genome have low complexity sequence, and it is common practice in the analysis of sequencing data to discard reads that map to multiple locations in the genome. The function \texttt{mappabilityCalc} calculates the percentage of each region that can be mapped to by reads generated from the experiment. It operates on a user-created \texttt{BSgenome} object of a masked genome sequence. The definition of which bases are mappable and which are not depends on the fragment length of the sequencing technology used. Therefore, there is no one masked \texttt{BSgenome} object that can be used by all users. Note that by masking, it is meant replacing the unmappable reference sequence bases by 'N', not creating a built-in mask.

\section{Summary}
Repitools has a number of useful functions for quality checking, analysis, and comparison of trends. Many of the functions work seamlessly on array data, as well as sequencing data. Also, there are numerous utility functions, that perform some common task in the investigation of epigenomic data. Consult the package documentation for instructions on how to use functions that were not demonstrated by this vignette.

\section{Environment}
This vignette was created in:

<<label=sInfo>>=
sessionInfo()
@

\end{document}
